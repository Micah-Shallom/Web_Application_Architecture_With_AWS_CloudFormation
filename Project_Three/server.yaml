Description: >
  Micah Shallom Bawa
  Project 3 Server Stack
  Deploying A High Availability Web Application For an Instagram-Like Application "Udagram"
  ---
Parameters:
  ProjectName:
    Type: String
  # AMItoUse:
  #   Type: String

  # LatestAmiId:
  #   Description: Region specific image from the Parameter Store
  #   Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  #   Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
##############################################################################################
Resources:
#Security Groups
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to loadbalancer
      VpcId:
        Fn::ImportValue:
          !Sub ${ProjectName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Fn::ImportValue: 
          !Sub ${ProjectName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
######################################################################################
#AutoScaling
  WebLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-09d56f8956ab235b3
      InstanceType: t2.medium
      KeyName: vockey
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      SecurityGroups: 
        - !Ref WebAppSecurityGroup
      BlockDeviceMappings: 
        - DeviceName: /dev/sdk
          Ebs: 
            VolumeSize: '10'
  WebApplicationGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebLaunchConfig
      MaxSize: '6'
      MinSize: '4'
      DependsOn: !Ref WebTargetGroup
      TargetGroupARNs:
        - Ref: WebTargetGroup
      VPCZoneIdentifier: 
      - Fn::ImportValue:
          !Sub "${ProjectName}-PRIV-SUBNET1"
      - Fn::ImportValue:
          !Sub "${ProjectName}-PRIV-SUBNET2"
######################################################################################
#Load Balancers
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups: 
      - !Ref LBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${ProjectName}-PUB-SUBNET1
        - Fn::ImportValue: !Sub ${ProjectName}-PUB-SUBNET2
      Tags: 
        - Key: Name
          Value: Application Loadbalancer across AZs
  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-VPCID"

  WebListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: HTTP
  WebListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref WebListener
      Priority: 1
      
  WebLoadBalancerAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: WebLoadBalancer
          Value: !GetAtt 
            - WebLoadBalancer
            - LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt 
            - WebTargetGroup
            - TargetGroupFullName
      MetricName: UnHealthyHostCount
      Period: 60
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      EvaluationPeriods: 1

Outputs:
  WebLBDNSName:
    Description: The DNS Name of the loadbalancer
    Value: !Join [ "", [ 'http://', !GetAtt WebLoadBalancer.DNSName ]]
    Export:
      Name: DNSName